new named_int SPELL_RIGHT = 285
new named_int SPELL_TOP = 75

interface_files:countrytechnologyview:countrytechnologyview += {
	windowType = {
		name = "spells_menu"
		position = { x = 10 y = 120 }
		scripted = yes
	}
}
new custom_window spells_menu = {
	potential = {
		has_country_flag = show_magic_menu
	}
}
new named_ui_node spell_menu_node = interface_files:countrytechnologyview:countrytechnologyview:spells_menu

new named_bool current_spell_side = no
new named_int current_spell_position_y = SPELL_TOP

spell_menu_node += {
	windowType = {
		name = "spells_page_0"
		position = { x = 0 y = 0 }
		scripted = yes
	}
}
new custom_window spells_page_0 = {
	potential = {
		&open_spell_page == 0
	}
}
new named_ui_node current_spell_page = spell_menu_node:spells_page_0

new named_effect calculate_spell_costs = {
	&development &= total_development
}
force_compile = calculate_spell_costs

new named_int spell_pages = 0
new effect create_next_spell_page = {
	args = bool
	transpile = {
		when [current_spell_side == yes] {
			spell_pages += 1
			spell_menu_node += {
				windowType = {
					name = `"spells_page_{spell_pages}"`
					position = { x = 0 y = 0 }
					scripted = yes
				}
			}
			new custom_window `spells_page_{spell_pages}` = {
				potential =* {
					always = no
				}
			}
			current_spell_position_y := SPELL_TOP
			current_spell_side := no
			run_effect = {
				delete = current_spell_page
			}
			new named_ui_node current_spell_page = spell_menu_node:last
		}
		when_not {
			current_spell_position_y := SPELL_TOP
			current_spell_side := yes
		}
	}
}

new script_variable mag = {
	tag = "magicka"
	name = "Spell Magnitude"
}
new script_variable temp = {
	name = "Temporary"
}
new enum spell_type = {
	country
	province
	diplomatic
}
new enum spell_tag = {
	school_alteration
	school_destruction
	school_conjuration
	school_restoration
	school_illusion
}
new class spell = {
	list = spells
	args = {
		string name
		spell_type type
		named_trigger trigger = { }
		
		list<spell_tag> tags = { }
		
		float base_cost
		
		bool magnitude_is_duration = false
		# If true then magnitude influences duration, but not the numbers.
		# If false then magnitude influences the numbers in the modifier.
		modifier? scaling_modifier
		# For scaling modifiers that you want to apply to the target
		# It gets passed the magnitude of the scaling as 'i'
		named_effect? on_cast_single
		# The effect for casting the spell.
		# Run only once, you can use the runtime variable 'spell_mag'
		effect? on_cast_multiplied
		# Effect is run multiple times with a variable 'i' that determines the scaling
	}
	on_create = {
		arc_call_1
		
		when [exists = this:scaling_modifier] {
			new scaling_modifier `spell_{this:id}` = {
				name = "{this:name} "
				modifier = this:scaling_modifier
				type = "{this:type }"
			}
		}
		
		when [current_spell_side == no] {
			current_spell_page += {
				iconType = {
					name = `custom_mechanic_spell_background_{this:id}`
					position = { x = ((current_spell_side * SPELL_RIGHT)) y = (current_spell_position_y) }
					quadTextureSprite = `"GFX_spell_type_background_{this:type}"`
					scripted = yes
				}
				guiButtonType = {
					name = `custom_mechanic_spell_{this:id}`
					position = { x = (7 + (current_spell_side * SPELL_RIGHT)) y = (6 + current_spell_position_y) }
					quadTextureSprite = `"GFX_spells_{this:id}"`
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_name_{this:id}`
					position = { x = (59+5 + (current_spell_side * SPELL_RIGHT)) y = (8 + current_spell_position_y) }
					maxWidth = 175
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_cost_{this:id}`
					position = { x = (59+5 + (current_spell_side * SPELL_RIGHT)) y = (29 + current_spell_position_y) }
					format = right
					maxWidth = 170
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_type_{this:id}`
					position = { x = (59+5+2 + (current_spell_side * SPELL_RIGHT)) y = (29 + current_spell_position_y) }
					maxWidth = 115
					maxHeight = 20
					scripted = yes
				}
			}
		}
		when_not {
			current_spell_page += {
				iconType = {
					name = `custom_mechanic_spell_background_{this:id}`
					position = { x = (current_spell_side * SPELL_RIGHT) y = (current_spell_position_y) }
					quadTextureSprite = `"GFX_spell_type_background_{this:type}_right"`
					scripted = yes
				}
				guiButtonType = {
					name = `custom_mechanic_spell_{this:id}`
					position = { x = (187 + 7 + (current_spell_side * SPELL_RIGHT)) y = (6 + current_spell_position_y) }
					quadTextureSprite = `"GFX_spells_{this:id}"`
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_name_{this:id}`
					position = { x = (10 + (current_spell_side * SPELL_RIGHT)) y = (8 + current_spell_position_y) }
					format = right
					maxWidth = 175
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_cost_{this:id}`
					position = { x = (59+5-48 + (current_spell_side * SPELL_RIGHT)) y = (29 + current_spell_position_y) }
					maxWidth = 55
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_type_{this:id}`
					position = { x = (59+5+2 + (current_spell_side * SPELL_RIGHT)) y = (29 + current_spell_position_y) }
					format = right
					maxWidth = 118
					maxHeight = 20
					scripted = yes
				}
			}
		}
		
		new custom_icon `custom_mechanic_spell_background_{this:id}` = { }
		new custom_text_box `custom_mechanic_spell_name_{this:id}` = {
			name = "{this:name} "
		}
		new custom_text_box `custom_mechanic_spell_type_{this:id}` = {
			name = "{this:type} "
			tooltip = ""
		}
		new custom_text_box `custom_mechanic_spell_cost_{this:id}` = {
			name = "{this:base_cost} "
			tooltip = ""
		}
		new custom_button `custom_mechanic_spell_{this:id}` = {
			tooltip = "{this:name} "
			trigger = { }
			effect = {
				&mag := 0.8
				when [exists = this:scaling_modifier] {
					scaling_modifiers:spell_test_1:set = mag
				}
			}
		}
		
		current_spell_position_y += 57
		
		when [current_spell_position_y > 700] {
			create_next_spell_page = yes
		}
		
		arc_call_2
	}
}
new class spell_header = {
	list = spell_headers
	args = {
		name = string
	}
	on_create = {
		current_spell_page += {
			iconType = {
				name = `custom_mechanic_spell_header_background_{this:id}`
				position = { x = (65 / 2 + (current_spell_side * SPELL_RIGHT)) y = (8 + current_spell_position_y) }
				quadTextureSprite = "GFX_banner_both_3"
				scripted = yes
			}
			instantTextBoxType = {
				name = `custom_mechanic_spell_header_name_{this:id}`
				position = { x = (current_spell_side * SPELL_RIGHT) y = (8 + 8 + current_spell_position_y) }
				maxWidth = 250
				maxHeight = 57
				format = center
				scripted = yes
			}
		}
		
		new custom_icon `custom_mechanic_spell_header_background_{this:id}` = { }
		new custom_text_box `custom_mechanic_spell_header_name_{this:id}` = {
			name = this:name
		}
		
		current_spell_position_y += 41
	}
}

new effect set_spell_target_type = {
	args = spell_type
	transpile = {
		when [args != country] {
			clr_country_flag = spell_target_country
		}
		when [args != province] {
			clr_country_flag = spell_target_province
			every_owned_province = {
				remove_province_modifier = spell_target_province_mod
			}
		}
		when [args != diplomatic] {
			clr_country_flag = spell_target_diplomatic
		}
		set_country_flag = `spell_target_{args}`
	}
}

new spell_header test = { name = "Test" }
new spell test_1 = { name = "Test" type = country base_cost = 10
	scaling_modifier = {
		advisor_cost = (-1 * i)
	}
}
new spell test_2 = { name = "Test" type = country base_cost = 10 }
new spell test_3 = { name = "Test" type = country base_cost = 10 }
new spell test_4 = { name = "Test" type = country base_cost = 10 }
new spell test_5 = { name = "Test" type = country base_cost = 10 }
new spell test_6 = { name = "Test" type = country base_cost = 10 }
new spell test_7 = { name = "Test" type = country base_cost = 10 }
new spell test_8 = { name = "Test" type = country base_cost = 10 }
new spell test_9 = { name = "Test" type = country base_cost = 10 }
new spell test_11 = { name = "Test" type = country base_cost = 10 }
new spell test_12 = { name = "Test" type = country base_cost = 10 }
new spell test_13 = { name = "Test" type = country base_cost = 10 }
new spell test_14 = { name = "Test" type = country base_cost = 10 }
new spell test_15 = { name = "Test" type = country base_cost = 10 }
new spell test_16 = { name = "Test" type = country base_cost = 10 }
new spell test_17 = { name = "Test" type = country base_cost = 10 }
new spell test_18 = { name = "Test" type = country base_cost = 10 }
new spell test_19 = { name = "Test" type = country base_cost = 10 }
new spell test_21 = { name = "Test" type = country base_cost = 10 }
new spell test_22 = { name = "Test" type = country base_cost = 10 }
new spell test_23 = { name = "Test" type = country base_cost = 10 }
new spell test_24 = { name = "Test" type = country base_cost = 10 }
new spell test_25 = { name = "Test" type = country base_cost = 10 }
new spell test_26 = { name = "Test" type = country base_cost = 10 }
new spell test_27 = { name = "Test" type = country base_cost = 10 }
new spell test_28 = { name = "Test" type = country base_cost = 10 }
new spell test_29 = { name = "Test" type = country base_cost = 10 }